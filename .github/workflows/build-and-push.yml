name: Build and Push Docker Image
on:
  push:
    branches: [ "main" ]
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ toLower(github.repository_name) }}
jobs:
  check-ec2-and-build:
    name: Check EC2 and Build/Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/ec2-key.pem
          chmod 400 ~/.ssh/ec2-key.pem
      - name: Check EC2 Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'echo "EC2 connection successful"'
        continue-on-error: false
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          envs: IMAGE_NAME
          script: |
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            sudo docker pull $IMAGE_NAME:latest
            sudo docker stop my-node-container || true
            sudo docker rm my-node-container || true
            sudo docker run -d --name my-node-container -p 3000:3000 $IMAGE_NAME:latest
